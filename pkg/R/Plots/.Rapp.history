test3<-vector()#
for (i in 1:dim(data3)[1]){#
	test3[i]<-3#
	#nrep[i]<-as.numeric(a[[1]][9])#
}
matTest<-as.matrix(cbind(test, test2, test3))
matTest
?load
input<-as.matrix(vector())
input
input1<-as.matrix(vector())#
	for (i in 1:dim(data3)[1]){#
		input1[i,1]<-1#
		#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
input1<-as.matrix(vector())#
	for (i in 1:dim(data3)[1]){#
		input1[,1]<-1#
		#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
input1
input1<-as.matrix(vector())#
	for (i in 1:dim(data1)[1]){#
		input1[i]<-1#
		#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
input1
input1<-as.matrix(vector())#
	for (i in 1:dim(data1)[1]){#
		input1[i][,1]<-1#
		#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
input1<-as.matrix(vector())#
	for (i in 1:dim(data1)[1]){#
		input1[i,1]<-1#
		#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
temp1<-vector()#
temp2<-vector()#
temp3<-vector()
	for (i in 1:dim(data1)[1]){#
		temp1[i]<-1#
		temp2[1]<-2#
		temp3[i]<-3#
		mat1<-as.matrix(cbind(temp1, temp2, temp3))#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
mat1
	for (i in 1:dim(data1)[1]){#
		temp1[i]<-1#
		temp2[1]<-2#
		temp3[i]<-3#
		mat1<-as.matrix(rbind(temp1, temp2, temp3))#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
mat1
	for (i in 1:dim(data1)[1]){#
		temp1[i]<-1#
		temp2[1]<-2#
		temp3[i]<-3#
		mat1<-rbind(temp1, temp2, temp3)#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
mat1
temp1
for (i in 1:dim(data1)[1]){#
		temp1[i]<-1#
		temp2[1]<-2#
		temp3[i]<-3#
		mat1<-c(temp1, temp2, temp3)#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
mat1
as.numeric(a[[1]][9])
a[[1]]
?aov
temp1<-vector()#
temp2<-vector()#
temp3<-vector()
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		temp1[i]<-as.numeric(a[[1]][9]) #nrepSims#
		temp2[1]<-as.numeric(a[[1]][10]) #epsilonProportion#
		temp3[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier#
		mat1<-c(temp1, temp2, temp3)#
		#nrep[i]<-as.numeric(a[[1]][9])
	}
mat1
	for (i in 1:dim(data1)[1]){#
		temp1[i]<-as.numeric(a[[1]][9]) #nrepSims#
		temp2[1]<-as.numeric(a[[1]][10]) #epsilonProportion#
		temp3[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier#
		mat1<-as.matrix(cbind(temp1, temp2, temp3))#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
mat1
nrepSims<-vector()#
epsilProp<-vector()#
epsilMult<-vector()
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier#
		mat1<-as.matrix(cbind(temp1, temp2, temp3))#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
mat1
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
		#nrep[i]<-as.numeric(a[[1]][9])#
	}
mat1
subset(a[[3]][which(a[[3]]$weight>0),], generation==2)[,7:8]->data2#
	for (i in 1:dim(data2)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier#
		mat2<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
mat2
class(a)
class(a[[3]])
a[[1]]
a[[1]][11]
a[[1]][13]
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}	#
subset(a[[3]][which(a[[3]]$weight>0),], generation==2)[,7:8]->data2#
	for (i in 1:dim(data2)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][13]) #numParticles#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier#
		mat2<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
all.mat<-as.matrix(rbind(mat1, mat2))
all.mat
a[[1]]
True.Intrinsic<-0.05#
True.StartingState<-10
?tapply
data1
		mean1<-tapply(data1, 2, mean)
		mean1<-apply(data1, 2, mean)
mean1
dim(data1)[2]
for (j in 1:dim(data1)[2]){#
			mean[j]<-apply(data1, 2, mean)
		}
	for (j in 1:dim(data1)[2]){#
			mean<-apply(data1, 2, mean)
		}
mean
mean[1]
for (j in 1:dim(data1)[2]){#
			mean<-apply(data1, 2, mean)#
			accuracy1[j]<-list(mean[j]-True.StartingState)
}
accuracy1<-vector()#
mean.a1<-vector()#
stdev.a1<-vector()
for (j in 1:dim(data1)[2]){#
			mean<-apply(data1, 2, mean)#
			accuracy1[j]<-list(mean[j]-True.StartingState)
	}
accuracy1
True.StartingState
TrueState<-c(10, 0.05)
mean<-apply(data1[2:dim(data1[1])], 2, mean)
dim(data1[1])
dim(data1)[1]
data1[2:dim(data1)[1]]
mean<-apply(data1[2:dim(data1)[1]], 2, mean)
data1[2:dim(data1)[1]]
mean<-apply(data1[2:dim(data1)[1],], 2, mean)
mean
data1<-rbind(TrueState, data1)
data1
for (j in 1:dim(data1)[2]){#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-list(mean[j]-data1[1,j])
}
accuracy1
	for (j in 1:dim(data1)[2]){#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]
}
accuracy1
all.a[[1]]<-a
all.a<-vector("list", 12)
all.a[[1]]<-a
all.a
all.a[[1]]<-a[[3]]
all.a
accuracy1<-list()#
mean.a1<-list()#
stdev.a1<-list()#
gen1<-list()#
for (i in 1:max(all.a[[1]]$generation)){#
	mean1<-mean(subset(all.a[[1]][which(a$weight>0),], generation==i)[,7])#
	accuracy1[i]<-list(mean1-True.StartingState)#
	mean.a1[i]<-mean(subset(all.a[[1]][which(a$weight>0),], generation==i)[,7])#
	stdev.a1[i]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==i)[,7])#
	gen1[i]<-i#
}
mean1
accuracy1
max(all.a[[1]]$generation
)
for (i in 1:max(all.a[[1]]$generation)){#
	mean1<-mean(subset(all.a[[1]][which(a$weight>0),], generation==i)[,7])#
	accuracy1[i]<-list(mean1-True.StartingState)#
	mean.a1[i]<-mean(subset(all.a[[1]][which(a$weight>0),], generation==i)[,7])#
	stdev.a1[i]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==i)[,7])#
	gen1[i]<-i#
}
gen1
mean1
accuracy1
all.a[[1]][which(a$weight>0)
,]
all.a
all.a[[1]]$generation
subset(all.a[[1]][which(a$weight>0),], generation==i)[,7]
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			#
			sd.a1[i]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,j])#
			#stdev.a1[j]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,7])#
			#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			#
			stdev[i]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,j])#
			#stdev.a1[j]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,7])#
			#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			#
			stdev.a1[i]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,j])#
			#stdev.a1[j]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,7])#
			#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
stdev.a1
stdev<-vector()
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			stdev<-apply(data1[j], 2, sd)#
			#
			#stdev.a1[j]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,7])#
			#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
stdev
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			#
			#stdev.a1[j]<-sd(subset(all.a[[1]][which(a$weight>0),], generation==1)[,7])#
			#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
stdev
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			accuracy1#
			stdev#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			return(accuracy1)#
			return(stdev)#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			print(accuracy1)#
			print(stdev)#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
	}#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-mean[j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			print(accuracy1)#
			print(stdev)#
		}
data1
nrepSims<-vector()#
epsilProp<-vector()#
epsilMult<-vector()#
#
TrueState<-c(10, 0.05) #bind TrueStates in order of matrix#
#
accuracy1<-vector()#
mean.a1<-vector()#
stdev<-vector()
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1
data1[2:dim(data1)[1],]
	for (j in 1:dim(data1)[2]){  #column summary stats#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-data1[2:dim(data1)[1],j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			print(accuracy1)#
			print(stdev)#
		}
	for (i in 1:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracyByRow[j]<-data1[2:dim(data1)[1],j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			print(accuracy1)#
			print(stdev)#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
	for (i in 1:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			data1<-rbind(TrueState, data1)#
			mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-data1[2:dim(data1)[1],j]-data1[1,j]#
			stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			print(accuracy1)#
			print(stdev)#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
data1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1
data1<-rbind(TrueState, data1)
TrueState<-c(10, 0.05) #bind TrueStates in order of matrix
data1<-rbind(TrueState, data1)
data1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)
data1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
	for (i in 1:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		data1<-rbind(TrueState, data1)#
	#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			#mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-data1[2:dim(data1)[1],j]-data1[1,j]#
			#stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			#print(accuracy1)#
			#print(stdev)#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
accuracy1
data1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)
for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
	#
		for (j in 1:dim(data1)[2]){  #column summary stats#
			#mean<-apply(data1[2:dim(data1)[1],], 2, mean)#
			accuracy1[j]<-data1[2:dim(data1)[1],j]-data1[1,j]#
			#stdev<-apply(data1[2:dim(data1)[1],], 2, sd)#
			#print(accuracy1)#
			#print(stdev)#
		}#
		#
		mat1<-as.matrix(cbind(nrepSims, epsilProp, epsilMult))#
	}
nrepSims
dim(nrepSims)
dim(data1)[1]
accuracy1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){ #
			accuracy1[i]<-data1[2:dim(data1)[1],j]-data1[1,j]#
		}#
	}
accuracy1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){ #
			accuracy1[i]<-data1[2:dim(data1)[1],j]-data1[1,j]#
		}#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1)	#
	}
dat
dim(data1)[1]
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){ #
			accuracy1[i]<-as.matrix(data1[2:dim(data1)[1],j]-data1[1,j])#
		}#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1)	#
	}
dat
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		for (j in 1:dim(data1)[2]){ #
			accuracy1[i]<-as.matrix(data1[i,j]-data1[1,j])#
		}#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1)	#
	}
dat
data1
dim(data1)[2])
dim(data1)[2]
j
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
accuracy2<-vector()
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
data1
dat
data1[1,1]
data1[1,2]
data1[i,1]
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
i=2
nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)
dat
i
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])
accuracy1
data1
length(data1)
class(data1)
as.matrix(data1)
class(data1)
length(as.matrix(data1))
length(as.matrix(data1)[1])
length(as.matrix(data1)[,1])
length(as.matrix(data1)[,])
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 2:length(as.matrix(data1)[,])){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 2:length(as.matrix(data1)[,1])){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1
data1<-rbind(TrueState, data1)#
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
data1<-rbind(TrueState, data1)
TrueState
data1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1
data1<-rbind(TrueState, data1)
data1
dim(data1)[1]
	for (i in 2:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
i
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input
nrepSims
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input
epsilProp
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input
epsilMult
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])
accuracy1
data1[2,1]-data1[1,1]
#Load input data from a batch file; make it for last gen only#
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1#
data1<-rbind(TrueState, data1)#
	for (i in 1:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
nrepSims
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input
nrepSims
a[[1]][9]
i
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)
	for (i in 1:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input#
		epsilProp[1]<-as.numeric(a[[1]][10]) #epsilonProportion--input#
		epsilMult[i]<-as.numeric(a[[1]][11]) #epsilonMultiplier--input#
		accuracy1[i]<-as.matrix(data1[i,1]-data1[1,1])#
		accuracy2[i]<-as.matrix(data1[i,2]-data1[1,2])#
		dat<-cbind(nrepSims, epsilProp, epsilMult, accuracy1, accuracy2)	#
	}
dat
i
dim(data1)[1]
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input
nrepSims
as.numeric(a[[1]][9])
data1<-rbind(TrueState, data1)
data1
subset(a[[3]][which(a[[3]]$weight>0),], generation==1)[,7:8]->data1
data1<-rbind(TrueState, data1)
dim(data1)[1]
	for (i in 1:dim(data1)[1]){  #Things to enter Matrix#
		nrepSims[i]<-as.numeric(a[[1]][9]) #nrepSims--input
	}
nrepSims
nrepSims[i]
